plugins {
	id 'java'
	id 'java-library'
	id 'checkstyle'
	id 'pmd'
	id 'maven-publish'
	id 'signing'
	id 'jacoco'
}

repositories {
	mavenCentral()
}

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
	implementation 'org.slf4j:slf4j-api:2.0.12'



	implementation 'com.google.guava:guava:33.1.0-jre'

	implementation 'org.jctools:jctools-core:4.0.3'
	implementation 'com.carrotsearch:hppc:0.9.1'
	implementation 'org.apache.commons:commons-math3:3.6.1'

	testImplementation 'org.hamcrest:hamcrest:2.2'
	testImplementation 'org.hamcrest:hamcrest-library:2.2'
	testImplementation 'junit:junit:4.13.2'
	
	testImplementation 'ch.qos.logback:logback-classic:1.5.2'
}

checkstyle {
	toolVersion = checkstyleVersion
	ignoreFailures = true
	showViolations = false

	configDirectory = rootProject.file("conf/quality-config")
	configFile = rootProject.file("conf/quality-config/cs-conf.xml")
}

pmd {
	toolVersion = pmdVersion
	ignoreFailures = true
	consoleOutput = true

	// Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
	ruleSets = []
	ruleSetFiles = files(rootProject.file("conf/quality-config/pmd-ruleset.xml"))	
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
        // TODO can add formatting
//        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}

tasks.withType(Pmd) {
	reports {
		xml.required = true
		html.required = true
	}
	// the following line of code adds our custom PMD rules as jar file to the classpath
	// pmdClasspath += rootProject.files("config/custom_pmd_rules/pmd.ruleset-1.0.0-SNAPSHOT.jar")
}


task checkThresholds(dependsOn: ["build"]) {
    doLast {
        def reportTypes = ['main', 'test']

        // Begin Checkstyle report parsing
        def csErrors = 0
        def csWarnings = 0
        def csInfos = 0

        def p = project

        reportTypes.each { String type ->
            def reportFile = file(p.projectDir.path + '/build/reports/checkstyle/' + type + '.xml')
            def reportResults = parseCheckstyleReport(reportFile)
            csErrors += reportResults[0]
            csWarnings += reportResults[1]
            csInfos += reportResults[2]
        }
        // End Checkstyle report parsing

        // Begin PMD report parsing
        def pmdErrors = 0
        def pmdWarnings = 0
        def pmdInfos = 0

        reportTypes.each { String type ->
            def reportFile = file(p.projectDir.path + '/build/reports/pmd/' + type + '.xml')
            def reportResults = parsePmdReport(reportFile)
            pmdErrors += reportResults[0]
            pmdWarnings += reportResults[1]
            pmdInfos += reportResults[2]
        }
        // End PMD report parsing

        // Print results
        println("Static analysis results:")
        println()
        println(" Checkstyle:")
        println("  Errors: " + csErrors + " (Threshold: " + checkstyleErrorThreshold + ")")
        println("  Warnings: " + csWarnings + " (Threshold: " + checkstyleWarningThreshold + ")")
        println("  Info: " + csInfos)
        println()
        println(" PMD:")
        println("  Errors: " + pmdErrors + " (Threshold: " + pmdErrorThreshold + ")")
        println("  Warnings: " + pmdWarnings + " (Threshold: " + pmdWarningThreshold + ")")
        println("  Info: " + pmdInfos)
        println()

        def eclipseUserHint = "\nNOTE: If you are using Eclipse, please make sure that you set it up properly as described at: https://github.com/kieker-monitoring/kieker#eclipse-setup-for-contributors"

        // Fail build if Checkstyle thresholds are violated
        if (csWarnings > Integer.valueOf(checkstyleWarningThreshold)) {
            throw new GradleException("There were checkstyle warnings exceeding the warning threshold! Warnings: " + csWarnings + " Threshold: " + checkstyleWarningThreshold + "." + eclipseUserHint)
        }

        if (csErrors > Integer.valueOf(checkstyleErrorThreshold)) {
            throw new GradleException("There were checkstyle errors exceeding the error threshold! Errors: " + csErrors + " Threshold: " + checkstyleErrorThreshold + "." + eclipseUserHint)
        }

        // Fail build if PMD thresholds are violated
        if (pmdWarnings > Integer.valueOf(pmdWarningThreshold)) {
            throw new GradleException("There were pmd warnings exceeding the warning threshold! Warnings: " + pmdWarnings + " Threshold: " + pmdWarningThreshold + "." + eclipseUserHint)
        }

        if (pmdErrors > Integer.valueOf(pmdErrorThreshold)) {
            throw new GradleException("There were pmd errors exceeding the error threshold! Errors: " + pmdErrors + " Threshold: " + pmdErrorThreshold + "." + eclipseUserHint)
        }
    }
    tasks.check.finalizedBy(checkThresholds)
}

def parseCheckstyleReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'file'.'error'.each { issue ->
            switch (issue.attribute("severity")) {
                case "error":
                    errors++
                    break;
                case "warning":
                    warnings++
                    break;
                default:
                    infos++
                    break;
            }
        }
    }
    return [errors, warnings, infos]
}

def parsePmdReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'file'.'violation'.each { issue ->

            // https://github.com/jenkinsci/pmd-plugin/blob/master/src/main/java/hudson/plugins/pmd/parser/PmdParser.java#L26-L29
            switch (issue.attribute("priority")) {
                case "1":
                case "2":
                    errors++
                    break;
                case "3":
                case "4":
                    warnings++;
                    break;
                case "5":
                default:
                    infos++
                    break;
            }
        }
    }
    return [errors, warnings, infos]
}

task makeJavadoc(type: Javadoc) {
    failOnError false
    source = project.sourceSets.main.allJava
}

task mainJar(type: Jar) {
    from sourceSets.main.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from project.sourceSets.main.allJava
}

task testJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'test'
    from sourceSets.test.output
}

task javadocJar(type: Jar, dependsOn: 'makeJavadoc') {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}



publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact mainJar
            artifact sourcesJar
            artifact javadocJar
            artifact testJar
            
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
		configurations.implementation.allDependencies.each {
		    def dependencyNode = dependenciesNode.appendNode('dependency')
		    dependencyNode.appendNode('groupId', it.group)
		    dependencyNode.appendNode('artifactId', it.name)
		    dependencyNode.appendNode('version', it.version)
		}
            }
            
	    pom {
                groupId = 'de.cau.cs.se.teetime'
                artifactId = 'teetime'
                version = teeTimeVersion
                name = 'TeeTime'
                description = 'TeeTime is a Pipe-and-Filter framework for Java'
                url = 'http://teetime-framework.github.io'

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'chw'
                        name = 'Christian Wulf'
                        email = 'chw@informatik.uni-kiel.de'
                        organization = 'Kiel University'
                    }
                    developer {
                        id = 'ntd'
                        name = 'Nelson Tavares de Sousa'
                        email = 'ntd@informatik.uni-kiel.de'
                        organization = 'Kiel University'
                    }
                    developer {
                        id = "rju"
                        name = "Reiner Jung"
                        email = 'reiner.jung@email.uni-kiel.de'
                        organization = 'Kiel University'
                    }
                }
                contributors {
                    contributor {
                        name = 'Christian Claus Wiechmann'
                        email = 'ccw@informatik.uni-kiel.de'
                    }
                    contributor {
                        id = 'christian.wulf'
                        name = 'Mathis Neumann'
                        email = 'teetime@madd.is'
                    }
                }
                
                scm {
                    connection = 'scm:git:https://github.com/teetime-framework/TeeTime.git'
                    url = 'https://github.com/teetime-framework/teetime'
                }
            }
        }
    }
    
    repositories {
        maven {
            def mavenUser = "NoMavenUser"
            if (System.env.teetimeMavenUser != null) {
                mavenUser = System.env.teetimeMavenUser
            }
            def mavenPassword = "NoMavenPassword"
            if (System.env.teetimeMavenPassword != null) {
                 mavenPassword = System.env.teetimeMavenPassword
            }
            credentials {
                username = mavenUser
                password = mavenPassword
            }

            // for local tests:
//            def releasesRepoUrl = "file:///tmp/myRepo/releases"
//            def snapshotsRepoUrl = "file://tmp/myRepo/snapshots"
            // Maven central:
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

            url = teeTimeVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

